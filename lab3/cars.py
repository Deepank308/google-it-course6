#!/usr/bin/env python3

import json
import os
import locale
import sys
import reports
import emails


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales": 0}
  most_popular_year = [2000, 0]
  per_year_sales = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    if item["total_sales"] > max_sales["total_sales"]:
        max_sales = item
    per_year_sales[item["car"]["car_year"]] = per_year_sales.get(item["car"]["car_year"], 0) + item["total_sales"]
    if most_popular_year[-1] < per_year_sales[item["car"]["car_year"]]:
        most_popular_year[-1] = per_year_sales[item["car"]["car_year"]]
        most_popular_year[0] = item["car"]["car_year"]
    # TODO: also handle max sales
    # TODO: also handle most popular car_year

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
        format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales".format(
        most_popular_year[0], most_popular_year[-1])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  break_summary = '<br/>'.join(summary)
  # TODO: turn this into a PDF report
  reports.generate('/tmp/cars.pdf', 'Sales summary for last month', break_summary, cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  sender = 'automation@example.com'
  recp = '{}@example.com'.format(os.environ.get('USER'))
  subject = 'Sales summary for last month'
  body = '\n'.join(summary)
  msg = emails.generate(sender, recp, subject, body, '/tmp/cars.pdf')
  emails.send(msg)


if __name__ == "__main__":
  main(sys.argv)

